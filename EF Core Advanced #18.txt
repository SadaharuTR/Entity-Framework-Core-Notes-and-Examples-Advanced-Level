EF Core'da Logging - Query Log - Query Tags - Global Query Filters

Logging 

using System.Collections.Generic;
using System.Reflection.Emit;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using System.Diagnostics;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System.Reflection.Metadata;

ApplicationDbContext context = new();
var datas = await context.Persons.ToListAsync();

#region Neden Loglama Yaparız?
//Çalışan bir sistemin runtime'da nasıl davranış gerçekleştirdiğini gözlemleyebilmek için log mekanizmalarından istifade ederiz.
#endregion

#region Neleri Loglarız?
//Yapılan sorguların çalışma süreçlerindeki davranışlarını.
//Gerekirse hassas veriler üzerinde de loglama işlemleri gerçekleştiriyoruz.
#endregion

#region Basit Olarak Loglama Nasıl Yapılır?
//Minumum yapılandırma gerektirmesi açısından basit olarak loglama yapabiliriz.
//Herhangi bir nuget paketine ihtiyaç duyulmaksızın loglamanın yapılabilmesi.
//Log işlemleri OnConfiguring içerisinde yapılmaktadır.

#region Debug Penceresine Log Nasıl Atılır?
//Debug.WriteLine ile kullanmış olduğumuz IDE'nin Debug penceresine Log'larız.
#endregion

#region Bir Dosyaya Log Nasıl Atılır?
//Normalde Console yahut Debug pencerelerine atılan loglar pek takip edilebilir nitelikte olmamaktadır.
//Logları kalıcı hale getirmek istediğimiz durumlarda en basit halyile bu logları harici bir dosyaya atmak isteyebiliriz. (genelde txt olur)
#endregion

#endregion

#region Hassas Verilerin Loglanması - EnableSensitiveDataLogging
//Default olarak EF Core log mesajlarında herhangi bir verinin değerini içermemektedir. Bunun nedeni, gizlilik teşkil edebilecek verilerin loglama
//sürecinde yanlışlıkla dahi olsa açığa çıkmamasının istenmesidir. 
//Bazen alınan hatalarda verinin değerini bilmek hatayı debug edebilmek için oldukça yardımcı olabilmektedir.
//Bu durumda hassas verilerinde loglamasını sağlayabiliriz.
#endregion

#region Exception Ayrıntısını Loglama - EnableDetailedErrors
//Hataları da log'layabiliriz. Detaylı olup olmayacağı bize kalmıştır.
#endregion

#region Log Levels
//EF Core default olarak Debug seviyesinin üstündeki (debug dahil) tüm davranışları loglar. Eğer ki buna müdahele etmek istiyorsak,
//optionsBuilder.LogTo(async message => await _log.WriteLineAsync(message), LogLevel.Information) 'da olduğu gibi LogLevel.Information'ı ikinci parametre olarak yazarak,
//Debug değil Information'dan sonrasını Log'la diyebiliriz.

#endregion

public class Person
{
    public int PersonId { get; set; }
    public string Name { get; set; }

    public ICollection<Order> Orders { get; set; }
}
public class Order
{
    public int OrderId { get; set; }
    public int PersonId { get; set; }
    public string Description { get; set; }
    public int Price { get; set; }

    public Person Person { get; set; }
}
class ApplicationDbContext : DbContext
{
    public DbSet<Person> Persons { get; set; }
    public DbSet<Order> Orders { get; set; }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());

        modelBuilder.Entity<Person>()
            .HasMany(p => p.Orders)
            .WithOne(o => o.Person)
            .HasForeignKey(o => o.PersonId);
    }
    //Harici txt dosyasına log atmak için StreamWriter sınıfından faydalanıyoruz. Uygulamanın debug klasörüne atar. Append ile de üzerine ekleme operasyonuna
    //devam etmesini söylüyoruz.
    StreamWriter _log = new("logs.txt", append: true);
    
    protected override async void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("Server = PC\\SQLEXPRESS; Database = ApplicationDb; User ID = SA; Password = 1; TrustServerCertificate = True");

        //optionsBuilder.LogTo(Console.WriteLine); //Logto metodunu kullanarak CW ile loglama'yı gerçekleştir.

        //optionsBuilder.LogTo(message => Debug.WriteLine(message)); //Debug penceresine log'la.

        //optionsBuilder.LogTo(async message => await _log.WriteLineAsync(message)); //ile harici dosyamıza log'umuzu atabiliriz.

        //Hangi log'lama çeşidini kullanıyorsak kullanalım EnableSensitiveDataLogging()'i çağırmamız hassas dataların gösterilmesi için yeterli olacaktır.
        /*
        optionsBuilder.LogTo(async message => await _log.WriteLineAsync(message))
            .EnableSensitiveDataLogging()
            .EnableDetailedErrors(); //'i çağırarak hataları daha detaylı görebiliriz.
        */

        //
        optionsBuilder.LogTo(async message => await _log.WriteLineAsync(message), LogLevel.Information) //'da olduğu gibi LogLevel.Information'ı ikinci parametre olarak yazarak,
        //Debug değil Information'dan sonrasını Log'la diyebiliriz.
            .EnableSensitiveDataLogging()
            .EnableDetailedErrors(); 

    }

    //Stream yapılanmaları kullanırken bunları bir şekilde kapatmayı unutmayalım.
    //Dispose fonksiyonları ile bunu sağlayabiliriz.
    public override void Dispose()
    {
        base.Dispose();
        _log.Dispose();
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await _log.DisposeAsync();
    }
    
}

------------------------

Query Log

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;
using System.Reflection;
using System.Reflection.Emit;

ApplicationDbContext context = new();
#region Query Log Nedir?
//LINQ sorguları neticesinde generate edilen sorguları izleyebilmek ve olası teknik hataları ayıklayabilmek amacıyla query log mekanizmasından istifade ederiz.
//SQL Profiler'da aynı işlemi yapabiliyoruz. Ama bazı veritabanlarına Profiler olmayabilir. EF Core'un desteklemiş olduğu her veritabanına karşılık bir sorgu görselleştirici
//kullanacağımıza buradaki sorguları merkezi bir noktaya loglayarak daha performanslı, hızlı bir davranış sergileyebiliriz.
#endregion
#region Nasıl Konfigüre Edilir?
//Microsoft.Extensions.Logging.Console kütüphanesi ile yapmış olduğumuz çalışmaların Query'leri konsolda loglayabiliriz.
//Microsoft.Extensions.Logging yazarak NuGet'te diğer muadil ortamlar için kütüphanelerde mevcut.
//Microsoft.Extensions.Logging.EventLog, Microsoft.Extensions.Logging.AzureAppServices, Microsoft.Extensions.Logging.Debug ........

await context.Persons.ToListAsync(); //sonucunda ekrana,
/* 
 info: Microsoft.EntityFrameworkCore.Database.Command[20101]
       Executed DbCommand (48ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
       SELECT [p].[PersonId], [p].[Name]
       FROM [Persons] AS [p]
*/ //yazacaktır.

//Sorguyu daha kompleks bir hale getirirsek,
await context.Persons
     .Include(p => p.Orders)
     .Where(p => p.Name.Contains("a"))
     .Select(p => new { p.Name, p.PersonId })
     .ToListAsync();
/*
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (47ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT [p].[Name], [p].[PersonId]
      FROM [Persons] AS [p]
      WHERE [p].[Name] LIKE N'%a%' 
*/ //şeklinde ekrana log'layacaktır.
#endregion

#region Filtreleme Nasıl Yapılır?
//LoggerFactory üzerinden AddFilter ile.
#endregion

public class Person
{
    public int PersonId { get; set; }
    public string Name { get; set; }

    public ICollection<Order> Orders { get; set; }
}
public class Order
{
    public int OrderId { get; set; }
    public int PersonId { get; set; }
    public string Description { get; set; }
    public int Price { get; set; }

    public Person Person { get; set; }
}
class ApplicationDbContext : DbContext
{
    public DbSet<Person> Persons { get; set; }
    public DbSet<Order> Orders { get; set; }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());

        modelBuilder.Entity<Person>()
            .HasMany(p => p.Orders)
            .WithOne(o => o.Person)
            .HasForeignKey(o => o.PersonId);
    }
    /*
    //İlk adımda, eklemiş olduğumuz kütüphaneye karşılık bir LoggerFactory oluştururuz.
    readonly ILoggerFactory loggerFactory = LoggerFactory.Create(builder  => builder.AddConsole());
    //Microsoft.Extensions.Logging.Console kütüphanesi sayesinde AddConsole()'u kullanabiliyoruz.
    */

    //Filtre ekleme işlemleri;
    
    readonly ILoggerFactory loggerFactory = LoggerFactory.Create(builder => builder
    .AddFilter((category, level) =>
    {
        return category == DbLoggerCategory.Database.Command.Name && level == LogLevel.Information; //ile Information seviyesinde loglar ile filtrelemiş oluruz.
    })
    .AddConsole());
    
    protected override async void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("Server = PC\\SQLEXPRESS; Database = ApplicationDb; User ID = SA; Password = 1; TrustServerCertificate = True");
        //İkinci adımda ise UseLoggerFactory ile sistemde devreye sokuyoruz.
        optionsBuilder.UseLoggerFactory(loggerFactory);
        //bundan sonra yapmış olduğumuz çalışmalarda generate dilen bütün sorguların hepsi ilgili ortama /burada konsola/ loglanacaktır.
    }
}

----------------------

Query Tags

using System.Collections.Generic;
using System.Reflection.Emit;
using System.Reflection;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;

ApplicationDbContext context = new();

#region Query Tags Nedir?
//EF Core ile generate edilen sorgulara açıklama eklememizi sağlayarak; SQL Profiler, Query Log vs. gibi yapılarda bu açıklamalar eşliğinde sorguları gözlemlememizi
//sağlayan bir özelltir.

//await context.Persons.ToListAsync(); //bur sorguya açıklamalar ekleyebiliriz.

#endregion

#region TagWith Metodu
//Sorgu, daha sorgu aşamasında yani IQueryable'da iken TagWith'i kullanabiliriz. Execute ederken bu açıklama satırı ile beraber execute edebilelim.
//await context.Persons.TagWith("Örnek bir açıklama...").ToListAsync();
/*
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (47ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      -- Örnek bir açıklama...

      SELECT [p].[PersonId], [p].[Name]
      FROM [Persons] AS [p]
*/
#endregion

#region Multiple TagWith
//Bir Query'e birden fazla açıklama satırı girebiliriz.
/*
await context.Persons.TagWith("Tüm personeller çekilmiştir.")
    .Include(p => p.Orders).TagWith("Personellerin yaptığı satışlar sorguya eklenmiştir.")
    .Where(p => p.Name.Contains("a")).TagWith("Adında 'a' harfi olan personeller filtrelenmiştir.")
    .ToListAsync();
*/
#endregion

#region TagWithCallSite Metodu

//Oluşturulan sorguya açıklama satırı ekler ve ek olarak bu sorgunun bu dosyada (.cs) hangi satırda üretildiğini bilgisini de verir.
/*
await context.Persons.TagWithCallSite("Tüm personeller çekilmişit.r")
    .Include(p => p.Orders).TagWithCallSite("Personellerin yaptığı satışlar sorguya eklenmiştir.")
    .Where(p => p.Name.Contains("a")).TagWithCallSite("Adında 'a' harfi olan personeller filtrelenmiştir.")
    .ToListAsync();
*/
#endregion

public class Person
{
    public int PersonId { get; set; }
    public string Name { get; set; }

    public ICollection<Order> Orders { get; set; }
}
public class Order
{
    public int OrderId { get; set; }
    public int PersonId { get; set; }
    public string Description { get; set; }
    public int Price { get; set; }

    public Person Person { get; set; }
}
class ApplicationDbContext : DbContext
{
    public DbSet<Person> Persons { get; set; }
    public DbSet<Order> Orders { get; set; }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());

        modelBuilder.Entity<Person>()
            .HasMany(p => p.Orders)
            .WithOne(o => o.Person)
            .HasForeignKey(o => o.PersonId);
    }
    readonly ILoggerFactory loggerFactory = LoggerFactory.Create(builder => builder
    .AddFilter((category, level) =>
    {
        return category == DbLoggerCategory.Database.Command.Name && level == LogLevel.Information;
    })
    .AddConsole());
    protected override async void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("Server = PC\\SQLEXPRESS; Database = ApplicationDb; User ID = SA; Password = 1; TrustServerCertificate = True");
        optionsBuilder.UseLoggerFactory(loggerFactory);
    }
}

---------------------------------

Global Query Filters

using Microsoft.EntityFrameworkCore;
using System.Reflection;

ApplicationDbContext context = new();

#region Global Query Filters Nedir?
//Bir entity'e özel uygulama seviyesinde genel/ön kabullü şartlar oluşturmamızı ve böylece verileri global bir şekilde filtrelememeizi sağlayan bir özelliktir.
//Böylece belirtilen entity üzerinden yapılan tüm sorgulamalarda ekstradan bir şart ifadesine gerek kalmaksızın filtreleri otomatik uygulayarak hızlıca sorgulama
//yapmamızı sağlamaktadır.

//Genellikle uygulama bazında aktif(IsActive) gibi verilerle çalışıldığı durumlarda,
//MultiTenancy uygulamalarda TenantId tanımlarken vs. kullanılabilir.
//Bkz. https://www.gencayyildiz.com/blog/asp-net-core-multitenancy-uygulama-nasil-olusturulur/
#endregion

#region Global Query Filters Nasıl Uygulanır?

//Bu uygulama üzerinde yapılan tüm Person sorgulamalarında default olarak aktif Person'lar üzerinden sorgulama yapmak istersek,

//Her sorguda tek tek ekleyebiliriz ya da ön tanımlı hale getirebiliriz.
//await context.Persons.Where(p => p.IsActive).ToListAsync(); //buradaki Where sorgusunu oto-uygulatabiliriz.

//HasQueryFilter()'daki işlemlerden sonra aşağıdaki sorgularda Where(p => p.IsActive) şartı otomatik sağlanacaktır.
//await context.Persons.ToListAsync();
//await context.Persons.FirstOrDefaultAsync(p => p.Name.Contains("a") || p.PersonId == 3);

#endregion

#region Navigation Property Üzerinde Global Query Filters Kullanımı
//Uygulama çağında kullanacağımız person nesnelerinin hepsi en az 1 satış yapmış olmalı, hiç satış yapmayanlar sorgulama neticesinde gelmesin.
/*
await context.Persons
    .Include(p => p.Orders)
    .Where(p => p.Orders.Count() > 0)
    .ToListAsync();
*/
//Her ihtiyaç noktasında bu şartı yazabiliriz.
//Ya da NP üzerinden GQF kullanabiliriz.

//HasQueryFilter()'daki işlemlerden sonra modelBuilder.Entity<Person>().HasQueryFilter(p => p.Orders.Count > 0);
//artık biz direkt Person'u sorgulasak dahi arkaplanda bu Person'un ilişkili olduğu Order'larda en az 1 tane kaydının olması gerektiğini EF Core anlayıp ona göre
//sorgusunu generate edecektir.
/*
var p1 = await context.Persons
    .AsNoTracking()
    .Include(p => p.Orders)
    .Where(p => p.Orders.Count > 0)
    .ToListAsync();

//iki sorgu da aynı sonucu verecektir. Üstteki sorguyu HasQueryFilter(p => p.Orders.Count > 0) işlemini önceden belirttiğimiz için aşağıdaki gibi sadeleştirebildik.

var p2 = await context.Persons.AsNoTracking().ToListAsync();
*/
//Gelen sorgulardaki veriler Change Tracker'dan dolayı birbirlerini etkileyebilirler. Bundan dolayı .AsNoTracking() ile Change Tracker'ı pasif hale getirelim.
//Bu şekilde ilişkisel tablolardaki şartlarımızı global bir şekilde sorguya ekleyip uzun uzun kodlar yazmaksızın sade query'ler inşa edebiliriz.
//Console.WriteLine();
#endregion
#region Global Query Filters Nasıl Ignore Edilir? - IgnoreQueryFilters
//Varsa bir Global Query Fiters'ı o anki sorgu için iptal etmek için IgnoreQueryFilters()'ı kullanırız.
//var person1 = await context.Persons.ToListAsync(); //şart devrede
//var person2 = await context.Persons.IgnoreQueryFilters().ToListAsync(); //şart uçtu.

//Console.WriteLine();
#endregion
#region Dikkat Edilmesi Gereken Husus!
//Global Query Filter uygulanmış bir kolona farkında olmaksızın şart uygulanabilmektedir. Bu duruma dikkat edilmelidir.

//await context.Persons.Where(p => p.IsActive).ToListAsync(); //iki kere aynı uygulamış olduk. Gereksiz şart maliyeti.

#endregion

public class Person
{
    public int PersonId { get; set; }
    public string Name { get; set; }
    public bool IsActive { get; set; }

    public List<Order> Orders { get; set; }
}
public class Order
{
    public int OrderId { get; set; }
    public int PersonId { get; set; }
    public string Description { get; set; }
    public int Price { get; set; }

    public Person Person { get; set; }
}
class ApplicationDbContext : DbContext
{
    public DbSet<Person> Persons { get; set; }
    public DbSet<Order> Orders { get; set; }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());

        //Global Query Filters Nasıl Uygulanır? başlığı.
        //modelBuilder.Entity<Person>().HasQueryFilter(p => p.IsActive); //Person entity'sine karşılık verilecek ön şartı (p => p.IsActive) sorguya ekle.

        //NP ile..
        modelBuilder.Entity<Person>().HasQueryFilter(p => p.Orders.Count > 0);
    }

    protected override async void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("Server = PC\\SQLEXPRESS; Database = ApplicationDb; User ID = SA; Password = 1; TrustServerCertificate = True");
    }
}